package ATM;

import databaseCON.UserDAO;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * The Withdrawl class provides a graphical user interface for users to withdraw money
 * from their bank account. It handles input validation and records the transaction.
 */
public class Withdrawl extends JFrame implements ActionListener {

    String pin;
    JTextField amountField;
    JButton withdrawButton, backButton;
    UserDAO userDAO;
    private ATM atmFrame;

    /**
     * Constructs a new Withdrawl frame.
     *
     * @param pin The PIN of the currently logged-in user, used to identify
     * the account for the withdrawal transaction.
     */
    Withdrawl(String pin, ATM atmFrame) {
        this.pin = pin;
        this.userDAO = new UserDAO();
        this.atmFrame = atmFrame;

        setTitle("Withdraw Funds");
        getContentPane().setBackground(new Color(230, 240, 250));
        setLayout(null);
        setSize(600, 400);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JLabel titleLabel = new JLabel("Withdraw Funds");
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 28));
        titleLabel.setForeground(new Color(30, 60, 90));
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        titleLabel.setBounds(0, 50, getWidth(), 35);
        add(titleLabel);

        JLabel maxWithdrawalLabel = new JLabel("MAXIMUM WITHDRAWAL IS 100,000 CZK");
        maxWithdrawalLabel.setForeground(new Color(50, 50, 50));
        maxWithdrawalLabel.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        maxWithdrawalLabel.setHorizontalAlignment(SwingConstants.CENTER);
        maxWithdrawalLabel.setBounds(0, 110, getWidth(), 25);
        add(maxWithdrawalLabel);

        JLabel instructionLabel = new JLabel("PLEASE ENTER YOUR AMOUNT (CZK)");
        instructionLabel.setForeground(new Color(50, 50, 50));
        instructionLabel.setFont(new Font("Segoe UI", Font.PLAIN, 18));
        instructionLabel.setHorizontalAlignment(SwingConstants.CENTER);
        instructionLabel.setBounds(0, 150, getWidth(), 25);
        add(instructionLabel);

        amountField = new JTextField();
        amountField.setFont(new Font("Consolas", Font.BOLD, 20));
        amountField.setBounds(200, 190, 200, 35);
        amountField.setBorder(BorderFactory.createLineBorder(new Color(150, 150, 150)));
        amountField.setHorizontalAlignment(JTextField.RIGHT);
        add(amountField);

        withdrawButton = new JButton("WITHDRAW");
        withdrawButton.setBackground(new Color(0, 102, 102));
        withdrawButton.setForeground(Color.WHITE);
        withdrawButton.setFont(new Font("Segoe UI", Font.BOLD, 16));
        withdrawButton.setFocusPainted(false);
        withdrawButton.setBounds(100, 270, 190, 45);
        withdrawButton.addActionListener(this);
        add(withdrawButton);

        backButton = new JButton("BACK TO ATM");
        backButton.setBackground(new Color(65, 125, 128));
        backButton.setForeground(Color.WHITE);
        backButton.setFont(new Font("Segoe UI", Font.BOLD, 16));
        backButton.setFocusPainted(false);
        backButton.setBounds(310, 270, 190, 45);
        backButton.addActionListener(this);
        add(backButton);

        setVisible(true);
    }

    /**
     * Handles action events generated by the buttons in the Withdrawl frame.
     * This method processes the withdrawal amount or navigates back to the ATM menu.
     *
     * @param e The ActionEvent generated by a button click.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == backButton) {
            this.dispose();
            atmFrame.setVisible(true);
        }

        if (e.getSource() == withdrawButton) {
            String amountString = amountField.getText();

            if (amountString.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter the Amount you want to withdraw.");
                return;
            }

            double withdrawalAmount;
            try {
                withdrawalAmount = Double.parseDouble(amountString);
                if (withdrawalAmount <= 0) {
                    JOptionPane.showMessageDialog(this, "Please enter a positive amount to withdraw.");
                    return;
                }

                if (withdrawalAmount > 100000) {
                    JOptionPane.showMessageDialog(this, "Maximum withdrawal limit is 100,000 CZK.");
                    return;
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid amount. Please enter a numerical value.");
                ex.printStackTrace();
                return;
            }

            double currentBalance = userDAO.getBalance(pin); // Use pin directly
            if (currentBalance == -1.0) {
                JOptionPane.showMessageDialog(this, "Error: Could not retrieve current balance. Please try again.");
                return;
            }

            if (withdrawalAmount > currentBalance) {
                JOptionPane.showMessageDialog(this, "Insufficient balance. Your current balance is " + String.format("%.2f CZK", currentBalance) + ".");
                return;
            }


            if (userDAO.performDebitTransaction(pin, withdrawalAmount, "Withdrawal")) {
                JOptionPane.showMessageDialog(this, String.format("%.2f CZK withdrawn Successfully.", withdrawalAmount));
                setVisible(false);
                new ATM(pin);
            } else {
                JOptionPane.showMessageDialog(this, "Transaction failed due to an unexpected error. Please try again.");
            }
        }
    }
}