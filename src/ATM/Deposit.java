package ATM;

import databaseCON.DatabaseConnection;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * The Deposit class provides a graphical user interface for users to deposit money
 * into their bank account. It records the transaction in the 'bank' table.
 */
public class Deposit extends JFrame implements ActionListener {

    private String pin;
    private JTextField amountField;

    private JButton depositButton, backButton;

    /**
     * Constructs a new Deposit frame.
     *
     * @param pin The PIN of the currently logged-in user. This PIN is used
     * to identify the user's account for the deposit transaction.
     */
    public Deposit(String pin) {
        this.pin = pin;

        setTitle("Deposit Funds");
        getContentPane().setBackground(new Color(230, 240, 250)); // Light blue-grey background
        setLayout(null);
        setSize(600, 400); // Adjusted size for a cleaner look
        setLocationRelativeTo(null); // Center the window
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // Main title label
        JLabel titleLabel = new JLabel("Deposit Funds");
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 28)); // Larger, modern font
        titleLabel.setForeground(new Color(30, 60, 90)); // Dark blue-grey text
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER); // Center text
        titleLabel.setBounds(0, 50, getWidth(), 35);
        add(titleLabel);

        // Instruction label
        JLabel instructionLabel = new JLabel("ENTER AMOUNT YOU WANT TO DEPOSIT (CZK)");
        instructionLabel.setFont(new Font("Segoe UI", Font.PLAIN, 18)); // Clearer font
        instructionLabel.setForeground(new Color(50, 50, 50)); // Darker grey for body text
        instructionLabel.setBounds(80, 130, 450, 25); // Adjusted position
        add(instructionLabel);

        // Amount input field
        amountField = new JTextField();
        amountField.setFont(new Font("Consolas", Font.BOLD, 20)); // Monospaced for numbers
        amountField.setBounds(200, 170, 200, 35); // Centered and adjusted
        amountField.setBorder(BorderFactory.createLineBorder(new Color(150, 150, 150))); // Subtle border
        amountField.setHorizontalAlignment(JTextField.RIGHT); // Align text to the right
        add(amountField);

        // Deposit button
        depositButton = new JButton("DEPOSIT");
        depositButton.setBackground(new Color(0, 102, 102)); // Teal button
        depositButton.setForeground(Color.WHITE);
        depositButton.setFont(new Font("Segoe UI", Font.BOLD, 16)); // Clear font
        depositButton.setFocusPainted(false);
        depositButton.setBounds(100, 270, 190, 45); // Larger button, left-aligned
        depositButton.addActionListener(this);
        add(depositButton);

        // Back button
        backButton = new JButton("BACK TO ATM"); // More descriptive text
        backButton.setBackground(new Color(65, 125, 128)); // Slightly different blue-green
        backButton.setForeground(Color.WHITE);
        backButton.setFont(new Font("Segoe UI", Font.BOLD, 16));
        backButton.setFocusPainted(false);
        backButton.setBounds(310, 270, 190, 45); // Larger button, right-aligned
        backButton.addActionListener(this);
        add(backButton);

        setVisible(true);
    }

    /**
     * Handles action events generated by the buttons in the Deposit frame.
     * This method processes the deposit amount or navigates back to the ATM menu.
     *
     * @param e The ActionEvent generated by a button click.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == backButton) {
            setVisible(false);
            new ATM(pin);
            return;
        }

        if (e.getSource() == depositButton) {
            String amountText = amountField.getText();

            if (amountText.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter the Amount you want to Deposit.");
                return;
            }

            double depositAmount;
            try {
                depositAmount = Double.parseDouble(amountText);
                if (depositAmount <= 0) {
                    JOptionPane.showMessageDialog(this, "Please enter a positive amount to Deposit.");
                    return;
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid amount. Please enter a numerical value.");
                return;
            }

            Date date = new Date();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String formattedDate = dateFormat.format(date);

            try (Connection con = DatabaseConnection.getConnection();
                 PreparedStatement pstmt = con.prepareStatement("INSERT INTO bank (pin, date, type, amount) VALUES (?, ?, ?, ?)")) {

                pstmt.setString(1, pin);
                pstmt.setString(2, formattedDate);
                pstmt.setString(3, "Deposit");
                pstmt.setDouble(4, depositAmount);

                int rowsAffected = pstmt.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, String.format("%.2f CZK Deposited Successfully.", depositAmount));
                    setVisible(false);
                    new ATM(pin);
                } else {
                    JOptionPane.showMessageDialog(this, "Deposit failed. Please try again.");
                }
            } catch (SQLException E) {
                System.err.println("SQL Error during deposit: " + E.getMessage());
                E.printStackTrace();
                JOptionPane.showMessageDialog(this, "An error occurred during deposit. Please try again.");
            }
        }
    }
}